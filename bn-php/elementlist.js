
var ApiGen = ApiGen || {};
ApiGen.elements = [["c","BN\\AggregateFunctions"],["c","BN\\Collections\\LinearDataStructure"],["c","BN\\Collections\\NullArgumentException"],["c","BN\\Collections\\Queue"],["c","BN\\Collections\\Stack"],["c","BN\\Compiler\\EvaluatorInteractor"],["c","BN\\Compiler\\EvaluatorResponder"],["c","BN\\Compiler\\Grammar\\GrammarBuilder"],["c","BN\\Compiler\\Grammar\\OperatorBuilder"],["c","BN\\Compiler\\Grammar\\Operators"],["c","BN\\Compiler\\Parser\\Operator\\OperatorOrder"],["c","BN\\Compiler\\Parser\\ParserErrorHandler"],["c","BN\\Compiler\\Parser\\QueueAccumulator"],["c","BN\\Compiler\\Parser\\ShuntingYardParser"],["c","BN\\Compiler\\Parser\\StackCleaning"],["c","BN\\Compiler\\Parser\\Token\\ParseClosingBracket"],["c","BN\\Compiler\\Parser\\Token\\ParseOpeningBracket"],["c","BN\\Compiler\\Parser\\Token\\ParseOperator"],["c","BN\\Compiler\\Parser\\Token\\ParseUnknownToken"],["c","BN\\Compiler\\Parser\\Token\\ParseValue"],["c","BN\\Compiler\\Parser\\TokenParser"],["c","BN\\Compiler\\Postfix\\CalculatorErrorHandler"],["c","BN\\Compiler\\Postfix\\Operands\\AtLeastN"],["c","BN\\Compiler\\Postfix\\Operands\\FixedCount"],["c","BN\\Compiler\\Postfix\\Operands\\Operands"],["c","BN\\Compiler\\Postfix\\Operands\\OperandsSummary"],["c","BN\\Compiler\\Postfix\\Operator\\AssignOperator"],["c","BN\\Compiler\\Postfix\\Operator\\CallbackEvaluator"],["c","BN\\Compiler\\Postfix\\Operator\\OperatorEvaluator"],["c","BN\\Compiler\\Postfix\\PostfixEvaluator"],["c","BN\\Compiler\\Postfix\\ProcessToken"],["c","BN\\Compiler\\Postfix\\StackAccumulator"],["c","BN\\Compiler\\Postfix\\Token\\ProcessAssign"],["c","BN\\Compiler\\Postfix\\Token\\ProcessConstant"],["c","BN\\Compiler\\Postfix\\Token\\ProcessKeyword"],["c","BN\\Compiler\\Postfix\\Token\\ProcessKeywordStrategy"],["c","BN\\Compiler\\Postfix\\Token\\ProcessOperator"],["c","BN\\Compiler\\Postfix\\Token\\ProcessUnknown"],["c","BN\\Compiler\\Postfix\\Token\\ProcessValue"],["c","BN\\Compiler\\Postfix\\Variables"],["c","BN\\Compiler\\ResponderDecorator"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToAssign"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToBNNumber"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToConstant"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToKeyword"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToSignedNumber"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToUnknown"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToUnsignedNumber"],["c","BN\\Compiler\\Scanner\\Converter\\LexemeToVariable"],["c","BN\\Compiler\\Scanner\\LexemeConverter"],["c","BN\\Compiler\\Scanner\\LexemeToToken"],["c","BN\\Compiler\\Scanner\\LexemeToTokens"],["c","BN\\Compiler\\Scanner\\Scanner"],["c","BN\\Compiler\\Scanner\\Statement"],["c","BN\\Compiler\\Scanner\\UnarySignsScanner"],["c","BN\\Compiler\\Token\\Token"],["c","BN\\Compiler\\Token\\TokenType"],["c","BN\\INumber"],["c","BN\\Number"],["c","BN\\NumberFactory"],["c","BN\\OperatorsFactory"],["f","bnPhpAutoload()"],["c","Demo\\Benchmark"],["c","Demo\\Controller"],["c","Demo\\GrammarDecorator"],["c","Demo\\Model"],["c","Demo\\NativeEval"],["c","Demo\\Presenter"],["f","examples()"],["f","expressionsToLines()"],["f","grammar()"],["f","operator()"],["f","transformVars()"]];
